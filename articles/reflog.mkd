% what the heck is a *reflog* and why is it so important?

# what is it

  * a reflog is a very special "branch" that records each position of HEAD
    in the last 30 days (by default). So removed branches won't be purged by
    prune until after waiting for 30 days, when the last reference to them
    will finally be released.

  * reflog history is not shared -- it is exclusive to your repository.  This
    is the only thing you lose if you clone a project as a means of performing
    a backup.

# how do I visualise it

  * the basic reflog commands are like this (the relative date is my
    preference; see `git help log` for other choices)

        # activity on HEAD, including timestamp
        git reflog show --date=relative
        # same, on some_branch
        git reflog show --date=relative some_branch

  * a good way to visualise the reflog is `git show-branch -g` (or `-gN`,
    where N is some integer).  This shows reflog info for the branch specified
    (defaulting to the current branch), including topological relationships
    and relative time.  This is useful if you had a lot of rebases or amended
    commits and you think you might need one of them back :-)

    It takes a little getting used to, so here're some hints:

      * the top of each vertical line represents a prior position of HEAD (or
        whatever branch you specified), with the latest one being the extreme
        left column
      * for each commit, the non-blank commit vertically below is its parent
        commit (merge commits are represented by a "-" sign)
      * so when you see a dip in the "line of peaks", you know there was a
        reset to something earlier followed by a new set of commits
      * very likely, the top commit to the right of any such "dip" is probably
        unreachable

# why would I need it

  * you can recover commits made on a detached head

  * you can fix a non-bare push

# cool tricks

[Here](tools/git-reflogk)'s a neat tool that shows you reflog output but
using gitk -- the graphical viewer.  Don't knock it until you've tried it :-)

----

^[based on a comment in <http://blogs.gnome.org/newren/2007/11/24/local-caching-a-major-distinguishing-difference-between-vcses/>]^
