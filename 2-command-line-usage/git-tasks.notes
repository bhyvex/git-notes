# git command-line usage cheatsheet/quickref

This document describes stuff that's not necessarily done every day.  The bare
minium stuff like `git add/commit/push/checkout/branch` etc is not
covered.

----

[[TOC]]

### setting up

I **strongly** recommend these settings to make life easier.

#### bash aliases for git

    alias g='git --no-pager'
    alias gp='git -p'
    alias mg='git help'

#### most useful stuff in `$HOME/.gitconfig`

My `.gitconfig` is [here](../tools/my.gitconfig.txt).  Parts of this
document assume some of these aliases.

### stuff you tend to forget

#### add and commit

    # stage updates/deletes for files git already knows about
    git add -u  [paths...]
    # ditto for ALL files, including new ones
    git add -A

    # stage updates/deletes for files git already knows about AND COMMIT
    git commit -a

#### push

  * don't forget to `git push --tags` when needed

#### diff

    # diff between work area and stage
    git diff
    # diff between work area and repo (CVS model)
    # note that "git diff" + "git diff --cached" == "git diff HEAD"
    git diff HEAD
    # other coolness
    git diff "@{yesterday}"

#### conflicts on pull/merge

  * try `gitk --merge conflicted_path`
  * `git diff MERGE_HEAD...HEAD` (note the *three* dots) shows you
    differences between the common ancestor and your HEAD.
  * similarly `git diff HEAD...MERGE_HEAD` shows you differences between
    the common ancestor and the branch you're trying to merge
  * `git checkout --conflict=diff3 conflicted_path` is a novel way of
    getting all 3 versions into the file so you can hack at it in vim
  * you can tell git blame to only show important changes, like so (pity it
    does not work with the GUI blame)

        git blame -C $(git merge-base HEAD MERGE_HEAD).. conflicted_path

#### log pickaxe and blame

  * finding out when a particular change happened or who made it

        git log -S"some code line" file.c   # why is this called pickaxe search?
        git blame -b file.c

#### misc

  * `ORIG_HEAD`: pull or merge (or anything that moves HEAD drastically)
    leave a copy of the old head with this name.  Reset can use it if needed.
    (see `man git-reset`).  `reset` itself copies the old `HEAD`
    to `ORIG_HEAD`, though that seems less useful
  * `FETCH_HEAD`: records the branch you fetched from a remote repository
    with your last 'git-fetch' invocation
  * `MERGE_HEAD` records the commit(s) you are merging into your branch
    when you run 'git-merge'

#### **oopsies! (recovering from mistakes)**

The following are useful to undo **before a commit**.  Note that these usages
of "checkout" (with **specific** files/paths) do not result in switching
branches but in updating the files/paths given.

  * bad working copy, want to make working <= staged

        git checkout -- filename

  * bad working copy, want to make working <= HEAD

        git checkout HEAD -- filename

  * bad staged version, want to make staged <= HEAD (working copy is not
    touched)

        git reset HEAD -- filename

When things get worse, and it's not just a few files that were screwed up, use
this

  * throw away all local changes and make working, staged <= HEAD

        git checkout -f

The following are useful to undo **after a commit**, as long as you haven't
published or pushed the commit elsewhere:

  * screwed up commit?  hope no one else pulled your last commit, quickly fix
    the source, and then

        git commit -a --amend

  * bad commit? apply a reversed patch as an additional commit on top

        git revert HEAD^    # one revision ago
        git revert "@{1 hour ago}"
        git revert "@{5}"   # 5th last saved state, from reflog
            # this may not be the 5th last revision if there were resets in
            # between.

  * commit is so bad you want to roll back time?

        git reset --hard HEAD~5 # 5th last revision
            # a reset rolls back the log, but is still recorded in the reflog,
            # which gets expired after some 30 to 90 days.

### useful commands

#### grep

`git grep` is very, **very*, powerful.  It has pretty much all the normal grep
options, plus:

  * doesn't search files that are not revisioned (untracked, excluded/ignored,
    etc)
  * with `--cached`, looks only in the cache
  * with one or more ref names, searched only within those revisions
  * can take a pattern, like `*.c`, to restrict the files searched
  * can do `--and`, `--or`, `--not`, etc with patterns.  This is a pretty big
    wow.  As <http://gitster.livejournal.com/27674.html> says:

        git grep -e ';;' --and --not -e 'for *(.*;;' -- '*.c'

    which searches for ';;' in all C files, unless they occur in a typical
    `for (;;) {` type of construct.

  * finally, there's a somewhat gratuitously thrown in `--all-match` option,
    which says "match any of these strings, but print matches only from files
    that have *all* of them".  I wonder whose scratch that was... ;-)

#### log and show

  * `git lga` is pretty cool; lga is an alias in my config for

        log --graph --pretty=oneline --abbrev-commit --decorate --all

  * Check the logs to see what's happened recently

        git log [--stat] -[p] [-n <number of commits to show>]
        git log "@{yesterday}.."
            # note the suffix "..", since the default is prefix "..", which is
            # probably not what you want
        git log somefile.c

  * `git show` is almost an alias for `git log -p -n 1`.  In general,
    `git show` does the right thing: shows a commit as a commit, a tree as
    a plain "ls", etc.  But if you're printing a large blob you better use a
    pager or redirect!

        git show [ HEAD^ | HEAD^^ | HEAD@{3} | origin | origin/master | etc ]
        git show 7a8b9c     # or some hex number; shows you the object
        git show HEAD~3:file.c  # get file.c from 3 versions back

#### reflog

  * useful reflog commands

        # activity on current branch, including timestamp
        git reflog show @{now}
        # same, on some_branch
        git reflog show some_branch@{now}
        # activity on all branches, including branch switches
        git reflog show HEAD@{now}

#### show-branch

  * `git show-branch -a` is useful to get a bird's eye view of all your
    branches and their topological relationships.
  * `git show-branch -g=N` shows you reflog info for the current branch,
    including topological relationships and relative time.  This is useful if
    you had a lot of rebases or amended commits and you think you might need
    one of them back :-)
  * if you need serious troubleshooting with branches, use the following.  It
    may be useful in some contexts where `git lg` is too complex to figure
    out what tip contains what commit

        git show-branch $(git show-ref -h |cut -c41-)

#### cherry (not cherry-pick)

  * summary: `+` shows you commits you have that the 'upstream' doesn't

        git cherry -v upstream [head]

  * detail: for every commit in 'head' that doesn't exist in 'upstream'
    * prefix `-` if there is at least an *equivalent* commit
    * prefix `+` if there's not even that

  * TIP: if you're trying to cut some branches (like `git branch --merged`)
    * put the candidate to be cut **on the right side**, and
    * make sure there are no `+`s in the output

#### cat-file (repo object) and ls-tree (tree object)

Note: I'm not sure what, if any, is the difference between `show` and
`cat-file -p` for "blob" objects.  For commits there is a subtle
difference.  (Try it)

    # any object
    git cat-file [ -t | -s | -p ] 789abc
        # find the type or size of an object, or pretty print it
        # If it's a blob, I'd use use "git show" until we find out what
        # "pretty" means for arbitrary blobs :-)
    git cat-file blob 789abc        # cat the object

    # any tree
    git ls-tree         # files and directories, top level only
    git ls-tree -l      # also show the size of the object
    git ls-tree -d      # only directories
    git ls-tree -r      # recurse, only files
    git ls-tree -r -d   # recurse, only directories
    git ls-tree -r -t   # recurse, both directories and files

#### ls-files

To get listings of various types of files, use `git ls-files`.  The common
but less intuitive ones are shown here, the rest can be had from the man page:

    # deleted files and modified files (deleted files are also counted as
    # modified, so may come up twice...
    git ls-files -d -m
    # what's in the index; includes files that were "git add"ed
    git ls-files -s
    # conflicted files
    git ls-files -u
    # "other files"; includes EVERYthing not in d/m/s, I think
    # seems to be equal to untracked + ignored
    git ls-files -o
    # untracked files only
    git ls-files --exclude-standard -o
    # ignored files only
    git ls-files --exclude-standard -o -i

### the bleeding edge

#### git bundle -- lifesaver for disconnected machines!

  * really awesome, but be careful, not all refspecs will work on the
    receiving side.  Assuming we're talking about a normal "origin" pull for
    an existing clone, this is what you do

        # sending side
        git bundle create ~/junk HEAD^^^..
            # or say "254c8de..", assuming the receiving side has that hash)
        # receiving side
        git ls-remote ~/junk    # note the refs on the right side
        git fetch ~/junk HEAD   # one of the refs that showed up
        # now merge it wherever you want
        git merge FETCH_HEAD

  * to clone a repo using this method:

        # sending side: cd to repo and checkout the master or whatever, then:
        git bundle create ~/junk HEAD
        # receiving side: mkdir/cd some empty directory, then:
        git init; git pull ~/junk

#### making an independent branch in an existing repo

  * based on
    <http://madduck.net/blog/2007.07.11:creating-a-git-branch-without-ancestry/>

        # ensure all changes are committed
        git status
        # ensure even ignored files aren't present, or you don't care
        git ls-files --exclude-standard -o -i

        # WARNING -- IF THE ABOVE COMMANDS SHOW ANY USEFUL FILES,
        #               STOP HERE!

        # create an empty tree -- choose one of these options
        # if you're sure you have no dot-files
        rm -rf *
        # if your tree may have dot files...
        git rm -r .; git clean -fdx

        # remove the index
        rm .git/index

        # point HEAD to the new branchname, whatever it is
        git symbolic-ref HEAD refs/heads/indbr

        # create some files, add, commit
        touch empty
        git add .
        git commit -m "first commit of independent branch"

#### garbage collection

  * Warning: `git gc --prune` is dangerous if others may be pushing to the
    repo at the same time!
  * Warning: `git gc` may **increase** the space used, since it even
    unpacks objects that were in packs if they became unreachable.  This is
    the same thing as `git repack -Adf` (note the uppercase "A")

  * To bring the repo size down the bare minimum, you need *both* the
    following commands (neither command by itself does the whole job).  Also
    Note the lowercase "a" on the "repack", which says you want to blindly
    discard unreachable objects instead of keeping them as loose objects.

        git repack -adf     # kills in-pack garbage
        git prune           # kills loose garbage

  * (from the do-you-really-want-to-do-this? department)

        git reflog expire --expire=10days --all
        # use expire-unreachable to limit it a bit
        # use branchname(s) instead of --all
        # units can be seconds, minutes, etc

#### remotes

  * how do you find out how many remotes you have and what they are called?

        vim .git/config                         # or...
        git remote | map git remote [-n] show   # even better!
            # use -n to prevent lookup if needed

#### combining and splitting commits
  * to split the top commit into multiple commits
    * start `git gui`
    * choose "amend last commit" from the commit menu
    * unstage all files
    * pick files or hunks in files to stage and commit
    * continue until all changes are committed
  * same as above, but the commit to split is not the top one
    * start an interactive rebase that includes that commit
    * mark that commit as "edit" and start the rebase
    * when the rebase pauses, use `git gui` as described above
    * continue the rebase
  * to combine a set of commits and split the result in some other way
    * start an interactive rebase
    * move lines as appropriate so your commits are together
    * choose "squash" on the second and subsequent ones and start the rebase
    * (dirty trick warning) when the editor for the combined commit message
       pops up, delete ALL the lines and save
    * use git gui as above
    * then continue the rebase

#### more exploration

  * to see a list of ALL the objects in the entire system, including
    filenames (but this isn't tremendously useful though):

        git rev-list --objects --all

#### simulating git stash
  * some say it's better to simulate git stash than actually use it!  The
    following makes use of the fact that the repo HEAD is usually one step
    behind the index, which is one step behind the working tree.

        # initial values: R (repo), I (index), C (changed), and U (untracked)
        # notation: repo contents/index contents/work tree contents
        # R/RI/RICU; start
        git commit --allow-empty -m wip-index-state
        # now RI/RI/RICU; pushed index onto repo
        git add -A && git commit --allow-empty -m wip-worktree-state
        # now RICU/RICU/RICU; pushed C/U files onto repo
            #   ... switch branch, work work work, commit ...
            #   now you want to get back to the saved state
        # go back to whatever branch it was
        git checkout whatever
        # now RICU/RICU/RICU
        git reset --mixed HEAD^ # repo=index=R+I
        # now RI/RI/RICU; moved HEAD and index back one step
        git reset --soft HEAD^
        # now R/RI/RICU; moved HEAD back one more step

### startup tips for CVSers

  * **gotcha**: `git add somefile` adds the **current** content of
    `somefile` to the staging area.  Changes made after this do not affect
    `git commit` unless you again do a `git add` or use the `-a`
    option to `git commit`.
    * **you will eventually prefer this :-)**
  * **gotcha**: `commit` means to your local repo, not to the "server"!
  * these commands/options effectively bypass the "index" or "staging
    area", **but the INDEX is really a wonderful concept, and you really
    should not bypass it like this**.  See [why the index is
    useful](../concepts-and-tips/uses-of-index.html) or
    <http://blogs.gnome.org/newren/2007/12/08/limbo-why-users-are-more-error-prone-with-git-than-other-vcses/>

        git diff HEAD       # to see changes you made
        git add             # to tell git about new files...
        git commit -a       # ...and let git figure out changed and deleted files before committing

  * CVS equivalence

        CVS                 GIT
        ---                 ---
        checkout            clone
        update              pull
        checkin             commit + push
        add                 add
        remove              rm
        ???                 mv   

  * <http://github.com/guides/completely-remove-a-file-from-all-revisions>
