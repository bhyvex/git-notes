# git and gitolite

[[TOC]]

----

### installing git on the server

  * install git using your system's normal install mechanisms
  * (optional) check <http://www.kernel.org/pub/software/scm/git/> to see how
    old your distro-supplied git is.  If it's more than 6-12 months old,
    consider upgrading manually.  You can get the latest source code from that
    same URL.
  * some tips on compiling git:
    * installing git from sources must be done after installing *some* version
      of git, otherwise the version number does not get picked up properly --
      long story!
    * installing the dependencies required to compile git is out of scope of
      this document!  However, you can set `NO_CURL`, `NO_EXPAT`, and
      `NO_TCLTK`.  The first two will prevent http-pull/push from being built,
      but I never use those protocols anyway, so I don't care :-)  The third
      one will prevent the GUI tools from being built, which does not matter
      on a server
    * after installing this, remove the distro-installed git using `urpme` or
      `aptitude remove`.  Distros will usuall place git in some other place
      than a normal compile, and having two versions causes confusion.
      However, if this automatically removes anything else (like
      libdigest-sha1-perl and liberror-perl on ubuntu), install them back
      manually -- just in case!

### obtaining gitolite

  * clone gitolite: `git clone git://github.com/sitaramc/gitolite.git`
    * if you're behind a firewall and can't clone, send me an email

  * decide if you want to run the "master" branch or the "pu" branch and check
    it out.  The "pu" branch will have the latest stuff.  It is also the one I
    run in production at work, so it may be "bleeding edge" but it shouldn't
    be "unsafe".  If you do run "pu" and things work out, I'd appreciate an
    email -- the more people tell me "pu" is working fine for them, the faster
    I will promote it to "master" :-)

### installing and running it

If you're really impatient, here's the shortest possible "**how to install
gitolite right from your workstation**":

1.  get passwordless (pubkey) access to `git@server`
2.  clone the gitolite repo and cd to it
3.  run `src/00-easy-install.sh -q git server`

If you don't know what item #1 above means, or have any other problems, stop
being impatient, and read the real docs in the gitolite repo instead of this
one :) The INSTALL (or similarly named) file in the "doc/" directory is a good
start.  HTML-ised versions of the docs can be found [here][mdoc] for the
"master" branch and [here][pudoc] for "pu".

[mdoc]: http://github.com/sitaramc/gitolite/tree/master/doc/
[pudoc]: http://github.com/sitaramc/gitolite/tree/pu/doc/

### miscellaneous notes

#### creating a separate "pushlog"

Gitolite maintains a log of who actually did the push, the name of the branch
or tag, and the old and new SHAs.  However, for simplicity, it puts all of
them in the same log file (all repos, all users!).

If you want something more granular, do the following:

Here's how to make that happen.

1.  create a `post-receive` file somewhere (maybe in `/tmp`) with the
    following contents, and make it executable (`chmod +x`)

        #!/bin/sh
        exec >> logs/pushlog
        date
        prefix="$(date +%s) $GL_USER"
        sed -e "s/^/$prefix /"
        EOF

    The date is written twice -- once in a user-friendly form for humans to
    look up, and once on each output line so things can be automated if
    needed.  Note that this *prefixes* the extra info to the data that git
    itself sends to the hook.

    An example output looks like this:

        Wed Jun  3 09:59:07 IST 2009
        1244003347 sitaram 4ce76ca6c4346dc7b14f5d3eca087241cf343f19 563f55309e8e22b7ee7b3d24450a1dbb860405a6 refs/heads/master

2.  copy this hook to all existing directories.  While you're about it, make
    sure the "logs" directory exists in all of them by setting a global
    option, as well as disable remote deletion of branches.

        su - git
        git config --global core.logAllRefUpdates true
        git config --global receive.denyDeletes true
        cd ~/repositories
        for i in *.git
        do
            cp /tmp/post-receive $i/hooks
        done

3.  **(this is the tricky bit)** make sure this becomes the default hook for
    any future repositories. [this is a TODO item for me... for now add it
    manually if you like.  Unlike gitosis, gitolite *does* maintain a log so
    you *do* have something to fallback upon.]

That should be it... make sure you test it!
