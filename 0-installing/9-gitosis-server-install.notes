# (admin) installing and using the gitosis server

^^[[TOC]]^^

----

### why gitosis

Gitosis is separate from git, and needs to be installed and configured.  So...
why do we bother?

Gitosis is useful in any server that is going to host multiple projects, each
with many developers, where some sort of access control is required.

In theory, this can be done with plain old Unix permissions: each user is a
member of one or more groups, each group "owns" one or more repositories, and
using unix permissions (especially the setgid bit -- `chmod g+s`) you can
allow/disallow users access to repos.

But there are several disadvantages here:

  * every user needs a userid and password on the server.  This is usually a
    killer...!
  * adding/removing access rights involves complex `usermod -G ...` mumblings
    which most admins would rather not deal with, thanks to you-know-who
  * *viewing* (aka auditing) the current set of permissions requires running
    multiple commands to list directories and their permissions/ownerships,
    users and their group memberships, and then correlating all these manually
  * auditing historical permissions or permission changes is pretty much
    impossible without extraneous tools
  * errors or omissions in setting the permissions exactly can cause problems
    of either kind: false accepts or false rejects
  * without going into ACLs it is not possible to give someone read-only
    access to a repo; they either get read-write access or no access.

Gitosis does away with all this:

  * it uses ssh magic to remove the need to give actual unix userids to
    developers -- demystifying this is the subject of the next section
  * it uses a simple but powerful config file format to specify access rights,
    allowing both users *and* repositories to be grouped meaningfully
  * access control changes are affected by modifying this file, (which itself
    is revision controlled in a special repository), committing the changes,
    and pushing the commit to the server
  * this also makes auditing trivial, both in terms of current access rights
    and historically
  * finally, the config file allows distinguishing between read-only and
    read-write access

### IMPORTANT -- overview of ssh

Here's a secret: ***gitosis uses far more ssh magic than git magic***!

Most problems in setting up gitosis are because people don't realise this, and
even if they did they don't know ssh well enough to help themselves.  If you
don't understand how ssh public key authentication works, or how the
`~/.ssh/authorized_keys` file can be used to restrict users, etc., you will
have endless amounts of trouble getting gitosis to work, because you'll be
attacking the wrong problem.

So please please please understand this before tearing your hair out and
blaming ***git/gitosis*** for whatever is going wrong with your setup :-)

#### ssh basics

Let's start with some basics, focusing *only* on the pieces relevant to
`gitosis`.  If this is not detailed enough, please use google and learn more
from somewhere, or maybe buy the OReilly ssh book.

  * You can login to an ssh server by typing a password, but ssh can also use
    ***public-private keys*** (also called "key pairs") for authentication.
    `gitosis` *requires* you to use this mechanism for your users -- they
    cannot log in using passwords.  Hopefully by the time you finish reading
    this document you will understand why :-)

    The way you set this up is you generate a key pair on your workstation,
    and give the server the public key.  (I need not add that the "private"
    key must be, well, kept *private*!)

  * **generating a key pair on your workstation** is done by running the
    command `ssh-keygen -t rsa`.  This produces two files in `~/.ssh`.  One is
    `id_rsa`; this is the **private** key -- ***never*** let it out of your
    machine.  The other is `id_rsa.pub`, which is the corresponding public
    key.  This public key is usually just one long line of text.

    * on Windows machines with msysgit installed, you should do this from
      within a "git bash" window.  The command will report the full path where
      the files have been written; make a note of this, and use those files in
      any of the description that follows

  * **adding your public key to the server's `~/.ssh/authorized_keys` file**
    is how ssh uses pubkeys to authenticate users.  Let's say
    sita@work.station is trying to log in as git@serv.er.  What you have to do
    is take the `~/.ssh/id_rsa.pub` file for user sita on work.station and
    append its contents (remember it's only one line) to
    `~/.ssh/authorized_keys` for user git on serv.er.

    The `authorized_keys` file can have multiple public keys (from many
    different people) added to it so any of them can log in to git@serv.er.

    In the normal case (not gitosis, but your normal everyday shell access),
    there's a command that does this, `ssh-copy-id`, which also fixes up
    permissions etc., as needed, since sshd is a little picky about allowing
    pubkey access if permissions on the server are loose.  Or you can do it
    manually, as long as you know what you're doing and you're careful not to
    erase or overwrite the existing contents of `~/.ssh/authorized_keys` on
    the server!

    But in the gitosis case, it's different; we'll get to that in a minute.

    * **troubleshooting pubkey authentication failures**: if you are unable to
      get ssh access to the server after doing all this, you'll have to look
      in `/var/log/secure` or `/var/log/auth.log` or some such file on the
      server to see what specific error `sshd` is complaining about.

  * **restricting users to specific commands** is very important for gitosis.
    If you read `man sshd` and look for "authorized_keys file format", you'll
    see a lot of options you can add to the public key line, which restrict
    the incoming user in various ways.  In particular, note the `command=`
    option, which means "regardless of what the incoming user is asking to do,
    forcibly run this command instead".

    Also note that when there are many public keys (i.e., lines) in the
    `authorized_keys` file, each line can have a *different* set of options
    and `command=` values.

    **This is the backbone of what makes gitosis work; please make sure you
    understand this**

#### how does gitosis use all this ssh magic?

##### authorising the main gitosis admin

As you follow the rest of this document to install gitosis, incuding the
script mentioned below, you will create a user called "git", and later you
will run a command called `gitosis-init` (as the "git" user, via the sudo
mechanism).

This command requires the `id_rsa.pub` file of the person who will be the main
gitosis administrator on its standard input.  So you should first copy this
file from your workstation to the server using normal, password-based, access.
It is this `gitosis-init` command that adds the public key supplied to the
`~/.ssh/authorized_keys` for the "git" user.

After this, you (because you have the *corresponding* private key) can
clone/push/pull the `gitosis-admin` repository from the server.

##### adding other users

In the main part of this document, I've set out [how to add new users and
projects](#admin).  But how does it actually work?  For example, how does it
add new users to the `~/.ssh/authorized_keys` file over on the server?

It's time to switch from ssh magic to git magic for a change.

Git allows you to create "hooks" -- usually shell scripts that are run before
or after various actions.  `man githooks` will tell you all you want to know,
but in particular, there's one called `post-update` that we're interested in.

The `post-update` hook is run on the remote side whenever you do a `git push`
and the git push succeeds.  When you setup gitosis, it installs a
`post-update` hook for the `gitosis-admin` repo that basically updates the
authorized_keys file if you have added new users and/or keys.

So:

  * git is responsible for running the hook when a push succeeds, and
  * gitosis provides the code in that hook, (which updates the authorized_keys
    file), so that
  * ssh can allow the newly added users to log in.

##### restricting shell access/distinguishing one user from another

These are two different questions you ought to be having by now: how does
gitosis restrict what I can do (all those access rights), and in fact how does
it distinguish between me and someone else, since we're all logging in as the
same remote user "git".

The answer is the `command=` we talked about before.  If you look in the
authorized_keys file, you'll see entries like this (I chopped off the ends of
course; they're pretty long lines):

    command="gitosis-serve sitaram",[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA18S2tM9T...
    command="gitosis-serve user2",[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArXtCT...

As you can see, the command that runs is always `gitosis-serve USERNAME` for
whatever user is logging in.  `ssh` does this, not git or gitosis.

Then, when `gitosis-serve` gets control, it looks at the first argument
("sitaram", "user2", etc) to determine who you are.  Also, before calling
`gitosis-serve`, ssh sets up an environment variable called
`SSH_ORIGINAL_COMMAND` containing the actual git command that your workstation
sent out, and this tells gitosis which repository you want to access, and
whether you're reading or writing.

Now gitosis has all the information it needs, it looks at its internal copy of
`gitosis.conf`, and either allows or rejects the request.

### installing git on the server

OK enough background, review, and hand waving.  On to the real stuff...

  * install git using your system's normal install mechanisms
  * (optional) check <http://www.kernel.org/pub/software/scm/git/> to see how
    old your distro-supplied git is.  If it's more than 6-12 months old,
    consider upgrading manually.  You can get the latest source code from that
    same URL.
  * some tips on compiling git:
    * installing git from sources must be done after installing *some* version
      of git, otherwise the version number does not get picked up properly --
      long story!
    * installing the dependencies required to compile git is out of scope of
      this document!  However, you can set `NO_CURL`, `NO_EXPAT`, and
      `NO_TCLTK`.  The first two will prevent http-pull/push from being built,
      but I never use those protocols anyway, so I don't care :-)  The third
      one will prevent the GUI tools from being built, which does not matter
      on a server
    * after installing this, remove the distro-installed git using `urpme` or
      `aptitude remove`.  Distros will usuall place git in some other place
      than a normal compile, and having two versions causes confusion.
      However, if this automatically removes anything else (like
      libdigest-sha1-perl and liberror-perl on ubuntu), install them back
      manually -- just in case!

### installing gitosis

  * clone gitosis: `git clone git://eagain.net/gitosis.git`
    * if you're behind a firewall and can't clone, you can get the latest
      version via HTTP from <http://eagain.net/gitweb/?p=gitosis.git>, by
      clicking on the word "snapshot" in the topmost commit listed
  * install python-setuptools using your distro mechanism
  * in the gitosis directory, run the
    [install.gitosis](../tools/install.gitosis.txt) command.  If your system
    is not a Mandriva or Debian/Ubuntu based system you can go through the
    script and manually execute all the important pieces (it's well commented)
    * pre-requisites: the public key corresponding to the private key on
       your **desktop** or **laptop** (usually found in
       `~/.ssh/id_rsa.pub`) needs to be copied over to the gitosis server

### #admin back to your desktop -- adding users and projects

#### How do you admin gitosis?

Simple: there's a repo called `gitosis-admin` which you clone on your
desktop.  You are allowed to do this because your public key was used in
installing and initialising gitosis (see above).

After that, maintaining/managing rights is a simple matter of adding people's
public keys, changing the config file (a very simple file), and pushing!

Here's a bit more detail on all that:

  * clone the `gitosis-admin` repository on the workstation where you created
    the public key used in the gitosis-init
  * collect the public key file from for each user you want to add (they may
    have to run `ssh-keygen -t rsa` first).  Name these files with simple
    names ending in `.pub`.  Example: `sitaram.pub`, `user2.pub`, etc.
  * put these files in the `keydir/` subdirectory of your gitosis clone
  * edit the file `gitosis.conf` to add projects and users.  User names should
    be the part before the `.pub` (in our example: `sitaram`, `user2`, etc)
  * `git add` all the files, `git commit`, and then `git push`

#### what about adding new projects?

While normal git does not let you *create* a repository on a remote machine by
doing a "push", gitosis does.  You can take any local repository, and use it
to seed/create a gitosis repository as follows (of course, the admin must have
given you write permissions for that repository in his `gitosis.conf`):

    cd some/local/repo
    # check it out, make sure it looks good; this will be the starting shape
    # of your new project
    git remote add origin git@your.gitosis.server:yourproject.git
    # you should have write access to "yourproject" for the next step to work
    got push origin master:master

At this point, gitosis sees you trying to push to a project that you have
permissions for, but doesn't exist yet.  There's a special case in the gitosis
code for that, which just creates the repo and then accepts the pushed data.

And you're done.

### setting up gitweb

To allow web access to the git repositories, do the following:

  * add the following lines to `gitosis.conf` for each project you want
    visible on the web page and push the changes to the server

        [repo foo]
        gitweb = yes
        description = whatever you want

  * (note) setting `gitweb=yes` adds the project to a file called
    `gitosis/projects.list`.  The full path of this file then must be
    given to the `$projects_list` in `/etc/gitweb.conf`, so gitweb can
    use it to decide what projects to show on the front page.

    ^^As an aside, setting `daemon=yes` makes gitosis create a file called
    `git-daemon-export-ok` in the project.git directory.  This is for git
    daemon access, which we don't use.^^

  * on the server, you have to do these things:
    * install apache or lighttpd
    * make it able to execute the "gitweb.cgi" that git created for you
    * copy `gitweb.css` and the two PNG files to wherever
       `/etc/gitweb.conf` is expecting them (or change the conf to where
       the files are)
    * and finally make the following changes/additions in
       `/etc/gitweb.conf`:

            $projects_list = "/home/git/gitosis/projects.list";
            $export_ok = "";
            $strict_export = "true";

#### Gotchas!

  * once you set `gitweb=yes` for a project and push, it's accessible
    forever after that, even if you remove that line.  You have to explicitly
    set `gitweb=no` and push before the project gets removed from the
    `gitosis/projects.list` file.

### troubleshooting

1.  a basic sanity check is to just try and `ssh git@your.gitosis.server`.  If
    everything is setup properly, you should get an error that says something
    like `Need SSH_ORIGINAL_COMMAND`.

    This proves that ssh authenticated you by your private key, found that the
    corresponding public key line specifies `command=gitosis-serve
    youruserid`, and ran gitosis-serve, which promptly complained because it
    was expecting something very specific.

2.  if you managed to clone the gitosis-admin repo, but changes you made to it
    are not taking effect, check if the hook is being executed at all.  See
    the last section of comments in [this
    script](../tools/install.gitosis.txt).

### creating a separate "pushlog"

Gitosis does not maintain a log of who actually did the push; everything looks
like it was pushed by the common "git" user.  However, the information **is**
available in the `authorized_keys` file.

Here's how to make that happen.

1.  patch `gitosis/serve.py` to pass that info on in `$USER`.  Use the
    patch in the footnote<sup>[[1]](#fn1)</sup> (courtesy Heiko Voigt (hvoigt at hvoigt.net), in
    <http://permalink.gmane.org/gmane.comp.version-control.git/120511>)

    If you've already installed gitosis, you'll have to patch something like
    `/usr/lib/python2.5/site-packages/gitosis-0.2-py2.5.egg/gitosis/serve.py`
    -- poke around in your system for an exact path.

2.  create a `post-receive` file in `/tmp` with the following contents, and
    make it executable.

        #!/bin/sh
        exec >> logs/pushlog
        date
        prefix="$(date +%s) $USER"
        sed -e "s/^/$prefix /"
        EOF

    The date is written twice -- once in a user-friendly form for humans to
    look up, and once on each output line so things can be automated if
    needed.  Note that this *prefixes* the extra info to the data that git
    itself sends to the hook.

    An example output looks like this:

        Wed Jun  3 09:59:07 IST 2009
        1244003347 sitaram 4ce76ca6c4346dc7b14f5d3eca087241cf343f19 563f55309e8e22b7ee7b3d24450a1dbb860405a6 refs/heads/master

3.  copy the hook to all existing directories.  While you're about it, make
    sure the "logs" directory exists in all of them by setting a global
    option, as well as disable remote deletion of branches.

        su - git
        git config --global core.logAllRefUpdates true
        git config --global receive.denyDeletes true
        cd ~/repositories
        for i in *.git
        do
            cp /tmp/post-receive $i/hooks
        done

4.  **(this is the tricky bit)** make sure this becomes the default hook for
    any future repositories.  You'll have to `locate post-receive.sample|grep
    templates` or some such thing to find out where to put it, then copy that
    `post-receive` file there.

That should be it... make sure you test it!

----

<a name="fn1"><sup>[1] patch for `gitosis/serve.py`

    diff --git gitosis/serve.py gitosis/serve.py
    index 867249e..0e2c4af 100644
    --- a/gitosis/serve.py
    +++ b/gitosis/serve.py
    @@ -201,6 +201,7 @@ class Main(app.App):
                 sys.exit(1)

             main_log.debug('Serving %s', newcmd)
    +        os.putenv('USER', user)
             os.execvp('git', ['git', 'shell', '-c', newcmd])
             main_log.error('Cannot execute git-shell.')
             sys.exit(1)
    --
    1.6.2.1.424.g0b27.dirty

</sup>
