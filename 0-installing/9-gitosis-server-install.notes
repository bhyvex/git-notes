= (admin) installing and using the gitosis server

[[TOC]]

=== installing git on the server

  * install git using your system's normal install mechanisms
  * (optional) upgrade git to the latest by downloading and compiling it from
    git://git.kernel.org/pub/scm/git/git.git
    ** bypassing the proxy to do this is outside the scope of this document,
       at least for now
    ** installing git from sources must be done after installing //some//
       version of git, otherwise the version number does not get picked up
       properly -- long story!
    ** make sure you {{{git checkout v1.6.1}}} or whatever is the latest
       version that {{{git tag}}} shows you before you start
    ** installing the dependencies required to compile git (like libcurl,
       libexpat, tcl -- yes, even on a server install) is also out of scope!
    ** after installing this, remove the distro-installed git using
       {{{urpme}}} or {{{aptitude remove}}}.  If this automatically removes
       anything else (like libdigest-sha1-perl and liberror-perl on ubuntu),
       install them back manually -- just in case!

==== a word on cloning external repos

Bypassing the proxy to clone external repos (git, gitosis) is out of the scope
of this document, but if you can't bypass it, and you have the clone somewhere
else, you can do the following:

    # on the machine where you have the clone
    git checkout master
    # make sure it is the right version etc
    git bundle create /tmp/temp.bdl master

    # now carry that file across from that machine to the one where you
    # want to install (somehow), then
    mkdir project       # git, gitosis, whatever
    cd project
    git init
    git pull /tmp/temp.bdl master:master

That's it!

=== installing gitosis

  * clone gitosis: {{{git clone git://eagain.net/gitosis.git}}}
    ** again, bypassing the proxy is out of scope here ;-)
  * install python-setuptools using your distro mechanism
  * in the gitosis directory, run the
    [[../tools/install.gitosis | install.gitosis]] command
    ** pre-requisites: the public key corresponding to the private key on
       your **desktop** or **laptop** (usually found in
       {{{~/.ssh/id_rsa.pub}}}) needs to be copied over to the gitosis server

=== back to your desktop -- cloning the admin repo

How do you admin gitosis?

Simple: there's a repo called {{{gitosis-admin}}} which you clone on your
desktop.  You are allowed to do this because your public key was used in
installing and initialising gitosis (see above)!

After that, maintaining/managing rights is a simple matter of adding people's
public keys, changing the config file (a very simple file), and pushing!

=== setting up gitweb

To allow web access to the git repositories, do the following:

  * add the following lines to {{{gitosis.conf}}} for each project you want
    visible on the web page and push the changes to the server

        [repo foo]
        gitweb = yes
        description = whatever you want

  * (note) setting {{{gitweb=yes}}} adds the project to a file called
    {{{gitosis/projects.list}}}.  The full path of this file then must be
    given to the {{{$projects_list}}} in {{{/etc/gitweb.conf}}}, so gitweb can
    use it to decide what projects to show on the front page.

    ^^As an aside, setting {{{daemon=yes}}} makes gitosis create a file called
    {{{git-daemon-export-ok}}} in the project.git directory.  This is for git
    daemon access, which we don't use.^^

  * on the server, you have to do these things:
    ** install apache or lighttpd
    ** make it able to execute the "gitweb.cgi" that git created for you
    ** copy {{{gitweb.css}}} and the two PNG files to wherever
       {{{/etc/gitweb.conf}}} is expecting them (or change the conf to where
       the files are)
    ** and finally make the following changes/additions in
       {{{/etc/gitweb.conf}}}:

            $projects_list = "/home/git/gitosis/projects.list";
            $export_ok = "";
            $strict_export = "true";

==== Gotchas!

  * once you set {{{gitweb=yes}}} for a project and push, it's accessible
    forever after that, even if you remove that line.  You have to explicitly
    set {{{gitweb=no}}} and push before the project gets removed from the
    {{{gitosis/projects.list}}} file.
