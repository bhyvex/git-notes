# (admin) installing and using the gitosis server

^^[[TOC]]^^

### installing git on the server

  * install git using your system's normal install mechanisms
  * (optional) upgrade git to the latest by downloading and compiling it from
    git://git.kernel.org/pub/scm/git/git.git
    * bypassing the proxy to do this is outside the scope of this document,
       at least for now
    * installing git from sources must be done after installing *some*
       version of git, otherwise the version number does not get picked up
       properly -- long story!
    * make sure you `git checkout v1.6.1` or whatever is the latest
       version that `git tag` shows you before you start
    * installing the dependencies required to compile git is also out of scope!
       However, you can set `NO_CURL`, `NO_EXPAT`, and `NO_TCLTK`.  The first
       two will prevent http-pull/push from being built, but I never use those
       protocols anyway, so I don't care :-)  The third one will prevent the
       GUI tools from being built, which does not matter on a server
    * after installing this, remove the distro-installed git using
       `urpme` or `aptitude remove`.  If this automatically removes
       anything else (like libdigest-sha1-perl and liberror-perl on ubuntu),
       install them back manually -- just in case!

#### a word on cloning external repos

Bypassing the proxy to clone external repos (git, gitosis) is out of the scope
of this document, but if you can't bypass it, and you have the clone somewhere
else, you can do the following:

    # on the machine where you have the clone
    git checkout master
    # make sure it is the right version etc
    git bundle create /tmp/temp.bdl master

    # now carry that file across from that machine to the one where you
    # want to install (somehow), then
    mkdir project       # git, gitosis, whatever
    cd project
    git init
    git pull /tmp/temp.bdl master:master

That's it!

### installing gitosis

  * clone gitosis: `git clone git://eagain.net/gitosis.git`
    * if you're behind a firewall and can't clone, you can get the latest
      version via HTTP from <http://eagain.net/gitweb/?p=gitosis.git>, by
      clicking on the word "snapshot" in the topmost commit listed
  * install python-setuptools using your distro mechanism
  * in the gitosis directory, run the
    [install.gitosis](../tools/install.gitosis.txt) command.  If your system
    is not a Mandriva or Debian/Ubuntu based system you can go through the
    script and manually execute all the important pieces (it's well commented)
    * pre-requisites: the public key corresponding to the private key on
       your **desktop** or **laptop** (usually found in
       `~/.ssh/id_rsa.pub`) needs to be copied over to the gitosis server

### back to your desktop -- cloning the admin repo

How do you admin gitosis?

Simple: there's a repo called `gitosis-admin` which you clone on your
desktop.  You are allowed to do this because your public key was used in
installing and initialising gitosis (see above)!

After that, maintaining/managing rights is a simple matter of adding people's
public keys, changing the config file (a very simple file), and pushing!

### setting up gitweb

To allow web access to the git repositories, do the following:

  * add the following lines to `gitosis.conf` for each project you want
    visible on the web page and push the changes to the server

        [repo foo]
        gitweb = yes
        description = whatever you want

  * (note) setting `gitweb=yes` adds the project to a file called
    `gitosis/projects.list`.  The full path of this file then must be
    given to the `$projects_list` in `/etc/gitweb.conf`, so gitweb can
    use it to decide what projects to show on the front page.

    ^^As an aside, setting `daemon=yes` makes gitosis create a file called
    `git-daemon-export-ok` in the project.git directory.  This is for git
    daemon access, which we don't use.^^

  * on the server, you have to do these things:
    * install apache or lighttpd
    * make it able to execute the "gitweb.cgi" that git created for you
    * copy `gitweb.css` and the two PNG files to wherever
       `/etc/gitweb.conf` is expecting them (or change the conf to where
       the files are)
    * and finally make the following changes/additions in
       `/etc/gitweb.conf`:

            $projects_list = "/home/git/gitosis/projects.list";
            $export_ok = "";
            $strict_export = "true";

#### Gotchas!

  * once you set `gitweb=yes` for a project and push, it's accessible
    forever after that, even if you remove that line.  You have to explicitly
    set `gitweb=no` and push before the project gets removed from the
    `gitosis/projects.list` file.

### creating a separate "pushlog"

Gitosis does not maintain a log of who actually did the push; everything looks
like it was pushed by the common "git" user.  However, the information **is**
available in the `authorized_keys` file.

Here's how to make that happen.

1.  patch `gitosis/serve.py` to pass that info on in `$USER`.  Use the
    patch in the footnote<sup>[[1]](#fn1)</sup> (courtesy Heiko Voigt (hvoigt at hvoigt.net), in
    <http://permalink.gmane.org/gmane.comp.version-control.git/120511>)

    If you've already installed gitosis, you'll have to patch something like
    `/usr/lib/python2.5/site-packages/gitosis-0.2-py2.5.egg/gitosis/serve.py`
    -- poke around in your system for an exact path.

2.  create a `post-receive` file in `/tmp` with the following contents, and
    make it executable.

        #!/bin/sh
        exec >> logs/pushlog
        date
        prefix="$(date +%s) $USER"
        sed -e "s/^/$prefix /"
        EOF

    The date is written twice -- once in a user-friendly form for humans to
    look up, and once on each output line so things can be automated if
    needed.  Note that this *prefixes* the extra info to the data that git
    itself sends to the hook.

    An example output looks like this:

        Wed Jun  3 09:59:07 IST 2009
        1244003347 sitaram 4ce76ca6c4346dc7b14f5d3eca087241cf343f19 563f55309e8e22b7ee7b3d24450a1dbb860405a6 refs/heads/master

3.  copy the hook to all existing directories.  While you're about it, make
    sure the "logs" directory exists in all of them by setting a global
    option.

        su - git
        git config --global core.logAllRefUpdates true
        cd ~/repositories
        for i in *.git
        do
            cp /tmp/post-receive $i/hooks
        done

4.  **(this is the tricky bit)** make sure this becomes the default hook for
    any future repositories.  You'll have to `locate post-receive.sample|grep
    templates` or some such thing to find out where to put it, then copy that
    `post-receive` file there.

That should be it... make sure you test it!

----

<a name="fn1"><sup>[1] patch for `gitosis/serve.py`

    diff --git gitosis/serve.py gitosis/serve.py
    index 867249e..0e2c4af 100644
    --- a/gitosis/serve.py
    +++ b/gitosis/serve.py
    @@ -201,6 +201,7 @@ class Main(app.App):
                 sys.exit(1)

             main_log.debug('Serving %s', newcmd)
    +        os.putenv('USER', user)
             os.execvp('git', ['git', 'shell', '-c', newcmd])
             main_log.error('Cannot execute git-shell.')
             sys.exit(1)
    --
    1.6.2.1.424.g0b27.dirty

</sup>
