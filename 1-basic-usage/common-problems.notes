# common problems and gotchas

----

[[TOC]]

----

### (windows) keeping files open in an editor

Windows does not allow you to overwrite or delete a file that is open in an
editor.  As a result, operations such as `git pull`, `merge`,
`rebase`, etc., may experience weird problems if they attempt to update
one of the files you have kept open.

If you get funky errors while doing any git operations, close all editors and
try again!

### "Not currently on any branch"?

In the graphical tool `gitk`, any "branch" that has a leading part in
yellow is a **remote** branch.  Do not checkout such a branch until you get a
little more familiar with git.  It is **not a local branch**, so checking it
out makes no sense.  For normal users, the GUI should prevent this, but it
doesn't, so I'm mentioning it.  (Think of it like a link to an XLS on a
website -- you can click the link and open it and edit it, but you can't save
it back to where it came from!)

  * you will recognise you are in such a branch by one of these symptoms
    * `gitk` does not show any branch name in **bold** when you quit and
       restart it
    * `git gui` says `current branch: HEAD` at the top left
    * `git status` says `Not currently on any branch`
    * you are able to commit your changes but when you push them to the
       remote server nothing seems to happen

  * to fix this:
    * first give that branch a name to better deal with it for later
       troubleshooting: `git checkout -b some_new_name`
    * then you figure out how to merge those changes into one of the main
       branches
    * then you push

Update: I have since written about this in [more depth
here](../concepts/detached-head.html).

### simple gotchas at the command line

  * `git log rev` and `git diff rev` go in different directions.  Log shows
    backward from the rev given, while diff goes forward from rev to the
    working directory.

  * many commands inherit options from lower level programs and their man
    pages will appear incomplete.  Read carefully to see what other commands'
    options are applicable to this one.  For example, `git-log` inherits from
    `git-rev-list` and `git-diff-tree`.

  * using `cp -a` copy instead of `git clone` will screw the timestamps.  A
    subsequent `git add .` will make it look like every file has changed, in
    terms of just the time stamp.  *Fix this by using `git status`, which
    updates the index for such cases as a side effect.*

  * confused by `HEAD^`, `HEAD~1`, etc.?  `man git-rev-parse` has a good
    diagram.  And remember the reflog is quite different and has a different
    syntax (`HEAD@{2`}).

  * cloning a repo: the following two commands are different; see
    <http://kerneltrap.org/mailarchive/git/2007/10/1/326757> (summary: the
    second one uses the git protocol, and makes no assumptions about the
    original and the clone being on the same file system or even machine)

        git clone foo bar           # versus
        # FIXME: fix this after permanent conversion to MD is over; should be
        # a triple-slash after the "file:"
        git clone file:/*foo bar

  * `git ls-tree` does not seem to work well when not at the root of
    `$GIT_WORK_TREE`
