= terminology

^^[[TOC]]^^

----

=== general terminology

  * a **project** is the minimum set of source code (and related files) that
    need to be kept together to **build** the software.  Example: Linux
    ** each project will have one **repository**
    ** one **team** can work on multiple projects, so there could be multiple
       repositories on each desktop

  * a **branch** in a project is an active line of development
    ** **master** is the conventional name for the main development tree of a
       project
    ** other conventional branches are **next** (for code that is ready to
       come into //main//), and various maintenance branches like **v1.3** or
       **v2.6.4** to designate released versions
    ** these are only conventions, not rules, but they seem to work well in
       general

  * a **feature** is a part of a project that is large and complex enough that
    it's day-to-day commits would be too noisy to include in the main project.
    Example: the disk subsystem, the networking subsystem, etc., in Linux
    ** a **feature branch** is a branch for a feature, and is usually
       long-lived.  This means it regularly acquires changes made in the main
       line, and -- at stable points in its development cycle -- merges its
       changes back into the main line
    ** small projects may not have any feature branches.  That doesn't mean
       they don't have any features :-)

=== git-specific terminology

  * a branch is "an active line of development"
  * //master//: default branch in a project (main development tree), by
    convention
  * //head//: tip of a branch
  * a repository can track many branches, but the working tree is associated
    with only one branch at a time
  * //HEAD//: tip of the branch associated with the working tree; this is
    where commits go
  * //index//: a staging area for the next commit; when you commit, the
    current index is turned into a real commit object
