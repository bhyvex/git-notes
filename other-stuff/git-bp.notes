# git -- suggested workflow for large projects

[[TOC]]

----

>   ^^**WARNING: I have not checked out all the commands -- there could be
    errors!  The first time you use it, please try them on a sandbox!**  Also,
    note that a lot of this can be done from the GUI also, if you wish.

>   This is essentially a modification and simplification of the typical
    workflow that Linux and other projects using DVCSs use.^^

### assumptions

  * the team needs to manage multiple projects
  * the team has one "server", in the sense that it is "on" most of the time
    (doesn't have to be big and powerful; can even be someone's desktop)
  * each developer has a copy of git on his desktop, and knows some basic
    commands or at least the GUI stuff

### roles

Every project has the following loosely defined roles.  If it's a small
project the same person may take on multiple roles.

  * 1 release manager.  In $COMPANY terms, this is the PL
  * 1 quality guy (maybe the same as the release manager)
  * (optional) M feature guys, one for each major "feature" in the project, if
    any.  In $COMPANY terms, this is like the ML
  * N developers

### typical workflow

Here's a typical workflow, assuming a starting point from the "master" branch
on the master server.  This assume that the people on the project have ssh
(write) access to the repo -- it is not the "please pull..." mode that
internet projects use.

#### developer

One-time:

  * clone from master

        git clone ssh://sita@master.server.com/path/to/repo.git

  * create your work branch and switch to it

        git checkout -b sita-work master

Regular:

  * switch to your work branch; assumed for the rest of this section

        git checkout sita-work

  * work work work/commit/test etc

        ...

  * keep up-to-date with changes on the server

        git fetch origin
        # destroys history but OK if you haven't published your commits yet
        git rebase origin/master
        # preserves history, but not always pretty; mandatory if you have
        # published your changes somewhere already
        git merge origin/master
        # make sure you re-test all your changes after this operation, in case
        # some upstream change has affected your code

  * keep sending your changes upstream

        git push origin sita-work

Irregular:

  * emergency fix ordered for bug 123 on v2.3

        git stash
        git pull master.server v2.3
        git checkout -b sita-v2.3-bug123 origin/v2.3
        # work work work test commit test commit etc
        git push origin sita-v2.3-bug123
        # email release manager to pull/test the above branch and merge into
        # master if OK
        # go back to your work
        git checkout sita-work
        git stash apply

  * (wild idea strikes you; so wild you don't even want to risk putting it in
    next)

        git checkout -b wildidea sita-work
        (work work work/commit/test etc)
        git checkout sita-work
        # is wildidea useful?
        git merge wildidea  # should be a "fast-forward"
        # get rid of temp branch
        git branch -d wildidea

#### feature guy

This will be a mix between the developers workflow and the release manager's
workflow.

#### release manager

When doing your own development, you do the same thing as the developer
described above

Regular:

  * keep up-to-date with changes on the server (not needed if you are the only
    release manager)

        ...same as for developer workflow above...

  * pull stuff from developers

        git checkout next
        git tag -f savenext
        git merge . dev-work
        # test it
        # test ok?
            git checkout master
            gitk --all  # and graphically cherry-pick whatever you want from
                        # "next" to "master"
            # test again just to make sure
        # test not ok?
            # discard changes
            git reset --hard savenext
            # send dev a problem report and ask him to resubmit

  * make sure next > master > maint is preserved

        git checkout master
        git merge vX.Y      # for each vX.Y that has seen any recent activity
        # test...

        git checkout next
        git merge master
        # test...

  * submit code to the master server

        git checkout master
        # test
        # test ok?  tag it
        git tag ready-`date -I`     # or something appropriate
        git push origin ready-`date -I`"

  * make a release

        git checkout master
        # test again?
        git tag v3.7
        git push git://master.server/path/to/repo v3.7
