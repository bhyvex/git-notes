# debugging pubkey related stuff

Gitolite uses ssh magic heavily, and sometimes you're not sure what the heck
is going on.  Even after you understand the [basic concepts][glb], you still
have to do some digging to find out what key is being used where.

[glb]: ../0-installing/9-gitolite-basics.html

[This script][dps] should help.

[dps]: ../tools/debug-pubkeys.sh

1.  download and copy [the script][dps] to the client *and* the server

2.  on the client, run:

        ~/debug-keys.sh client  > ~/fp

    (yes that's the word "client" exactly as is!)

    That defaults to using `~/.ssh/id_rsa.pub`, failing that
    `~/.ssh/id_dsa.pub`.  If your correct pubkey is not found by this method,
    you have to specify it explicitly:

        ~/debug-keys.sh client ~/.ssh/id_rsa    > ~/fp

    Either way, this produces a one-line output, called the "key fingerprint".

3.  copy this file to the server, again to `~/fp` (or whatever you like)

4.  now go back to the server

5.  cd to your `$GL_ADMINDIR`.  By default it is `~/.gitolite`:

        cd ~/.gitolite

    but if you changed stuff in your `~/.gitolite.rc` it may be somewhere
    else.

    I assume your `keydir/` is within this directory.  If you changed *that*
    you clearly know what you're doing; figure it out yourself.  There is no
    imaginable reason to change it anyway.

6.  run this command, substituting whatever filename you used for `~/fp` if
    that is not what you called it:

        ~/debug-keys.sh server ~/fp

    (yes again, that's the word "server" exactly as is!)

That will tell you what pubkey in your gitolite-admin's set of pubkeys
matched, as well as which line(s) in the git server's authkeys file matched.
And if the first one that comes up in the latter list says "wont invoke
gitolite" then it won't!

If you're still in doubt what all that means, ask on #git.

[ Assumptions: we assume there are only two kinds of keys in your authkeys
file -- the normal ones for shell access and the gitolite ones. ]
