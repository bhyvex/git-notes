# recovering a dropped stash:

#### the GUI way

You dropped a stash that was created recently, and now you want to recover it.
As long as you did not do a garbage collection in between, this should work:

    gitk $(git fsck | grep commit | cut -f3 -d' ') --since='1 week ago'

The part within the parenthesis finds all unreachable commit objects and
returns their hashes.  If you never did a garbage collect there might be too
many false positives so the `--since` clause (which you can adjust to whatever
you want of course; mine is just an example) limits the display to commits
created recently.

A "stash" has a very recognisable, triangular, shape in the commit DAG, and
with gitk you can visually find stashes really fast.  For me, this is the kind
of task that *calls out* for a GUI -- infrequently required, no conceivable
need to automate, and containing data that stands out visually.

#### the command line way

Writing something longer than that for a problem that occurs once in a blue
moon is not my style (very low ROI!), but doener gave me this:

    git fsck --unreachable | grep commit | cut -d\  -f3 |
    xargs git log --no-walk --merges --grep='^\(WIP on \|On \)\((no branch)\|[^ ]\+\):'

and it was strangely compelling; I knew about `--merges` but not `--no-walk`,
and I anticipate using it a lot more in future :-)

I then realised that checking for the "triangular" shape is better than
grepping for WIP:

    for h in $(git fsck --unreachable | grep commit | cut -d\  -f3)
    do
        [[ $(git rev-parse $h^) == $(git rev-parse $h^2^) ]] 2>/dev/null &&
        git log -1 --format='%h (%ar) %s' -1 $h
    done

And if you really want to see the triangles:

    for h in $(git fsck --unreachable | grep commit | cut -d\  -f3)
    do
        [[ $(git rev-parse $h^) == $(git rev-parse $h^2^) ]] 2>/dev/null &&
        git log --format='%h (%ar) %s' -2 --graph $h &&
        echo
    done
